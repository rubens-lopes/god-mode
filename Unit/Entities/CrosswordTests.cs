using FluentAssertions;
using GodMode.Domain.Entities;

namespace GodMode.Tests.Unit.Entities;

public class CrosswordTests
{
  [Fact]
  public void Crossword_should_gather_sentences_when_initiated()
  {
    var crossword = new Crossword(
      new Cell(new Coordinate(0, 0)),
      new Cell(new Coordinate(0, 1), 'R'),
      new Cell(new Coordinate(0, 2), 'O'),
      new Cell(new Coordinate(0, 3), 'U'),
      new Cell(new Coordinate(0, 4), 'N'),
      new Cell(new Coordinate(0, 5), 'D'),
      new Cell(new Coordinate(0, 6)),
      new Cell(new Coordinate(0, 7)),
      new Cell(new Coordinate(0, 8), ' '),
      new Cell(new Coordinate(0, 9)),
      new Cell(new Coordinate(0, 10)),
      new Cell(new Coordinate(0, 11), 'O'),
      new Cell(new Coordinate(0, 12)),
      new Cell(new Coordinate(0, 13)),
      new Cell(new Coordinate(0, 14)),
      new Cell(new Coordinate(0, 15), 'T'),
      new Cell(new Coordinate(0, 16), 'I'),
      new Cell(new Coordinate(0, 17), 'C'),
      new Cell(new Coordinate(0, 18)),
      new Cell(new Coordinate(1, 0), 'O'),
      new Cell(new Coordinate(1, 9), 'R'),
      new Cell(new Coordinate(1, 18), 'N'),
      new Cell(new Coordinate(2, 0)),
      new Cell(new Coordinate(2, 2)),
      new Cell(new Coordinate(2, 9), 'A'),
      new Cell(new Coordinate(2, 16), 'P'),
      new Cell(new Coordinate(2, 18), 'I'),
      new Cell(new Coordinate(3, 0)),
      new Cell(new Coordinate(3, 2)),
      new Cell(new Coordinate(3, 3), 'E'),
      new Cell(new Coordinate(3, 4), 'N'),
      new Cell(new Coordinate(3, 5), 'A'),
      new Cell(new Coordinate(3, 6)),
      new Cell(new Coordinate(3, 7), 'I'),
      new Cell(new Coordinate(3, 8), 'N'),
      new Cell(new Coordinate(3, 9)),
      new Cell(new Coordinate(3, 10)),
      new Cell(new Coordinate(3, 11), 'G'),
      new Cell(new Coordinate(3, 12)),
      new Cell(new Coordinate(3, 13), 'A'),
      new Cell(new Coordinate(3, 14), 'N'),
      new Cell(new Coordinate(3, 15)),
      new Cell(new Coordinate(3, 16)),
      new Cell(new Coordinate(3, 18)),
      new Cell(new Coordinate(4, 0), 'E'),
      new Cell(new Coordinate(4, 2), 'P'),
      new Cell(new Coordinate(4, 9)),
      new Cell(new Coordinate(4, 16), 'T'),
      new Cell(new Coordinate(4, 18), 'E'),
      new Cell(new Coordinate(5, 0)),
      new Cell(new Coordinate(5, 2), 'A'),
      new Cell(new Coordinate(5, 9), 'N'),
      new Cell(new Coordinate(5, 16), ' '),
      new Cell(new Coordinate(5, 18), ' '),
      new Cell(new Coordinate(6, 0), ' '),
      new Cell(new Coordinate(6, 2), 'L'),
      new Cell(new Coordinate(6, 16), 'P'),
      new Cell(new Coordinate(6, 18), 'B'),
      new Cell(new Coordinate(7, 0), 'T'),
      new Cell(new Coordinate(7, 2)),
      new Cell(new Coordinate(7, 3)),
      new Cell(new Coordinate(7, 4), 'K'),
      new Cell(new Coordinate(7, 5)),
      new Cell(new Coordinate(7, 6), 'A'),
      new Cell(new Coordinate(7, 7)),
      new Cell(new Coordinate(7, 8), 'D'),
      new Cell(new Coordinate(7, 9), ' '),
      new Cell(new Coordinate(7, 10), 'S'),
      new Cell(new Coordinate(7, 11)),
      new Cell(new Coordinate(7, 12)),
      new Cell(new Coordinate(7, 13), 'E'),
      new Cell(new Coordinate(7, 14), 'N'),
      new Cell(new Coordinate(7, 15), 'C'),
      new Cell(new Coordinate(7, 16)),
      new Cell(new Coordinate(7, 18)),
      new Cell(new Coordinate(8, 0), 'I'),
      new Cell(new Coordinate(8, 2), 'D'),
      new Cell(new Coordinate(8, 16), 'E'),
      new Cell(new Coordinate(8, 18), 'U'),
      new Cell(new Coordinate(9, 0), 'C'),
      new Cell(new Coordinate(9, 2), 'I'),
      new Cell(new Coordinate(9, 16)),
      new Cell(new Coordinate(9, 18), 'N'),
      new Cell(new Coordinate(10, 0)),
      new Cell(new Coordinate(10, 2)),
      new Cell(new Coordinate(10, 3), 'O'),
      new Cell(new Coordinate(10, 4)),
      new Cell(new Coordinate(10, 5), ' '),
      new Cell(new Coordinate(10, 6), 'S'),
      new Cell(new Coordinate(10, 7)),
      new Cell(new Coordinate(10, 8), 'Q'),
      new Cell(new Coordinate(10, 9)),
      new Cell(new Coordinate(10, 10), 'I'),
      new Cell(new Coordinate(10, 11)),
      new Cell(new Coordinate(10, 12)),
      new Cell(new Coordinate(10, 13), 'R'),
      new Cell(new Coordinate(10, 14), 'T'),
      new Cell(new Coordinate(10, 15), 'L'),
      new Cell(new Coordinate(10, 16)),
      new Cell(new Coordinate(10, 18)),
      new Cell(new Coordinate(11, 0), 'E'),
      new Cell(new Coordinate(11, 18)),
      new Cell(new Coordinate(12, 0)),
      new Cell(new Coordinate(12, 1)),
      new Cell(new Coordinate(12, 2), 'O'),
      new Cell(new Coordinate(12, 3), '-'),
      new Cell(new Coordinate(12, 4)),
      new Cell(new Coordinate(12, 5)),
      new Cell(new Coordinate(12, 6)),
      new Cell(new Coordinate(12, 7), 'D'),
      new Cell(new Coordinate(12, 8), 'L'),
      new Cell(new Coordinate(12, 9)),
      new Cell(new Coordinate(12, 10), 'D'),
      new Cell(new Coordinate(12, 11), ' '),
      new Cell(new Coordinate(12, 12)),
      new Cell(new Coordinate(12, 13)),
      new Cell(new Coordinate(12, 14), 'O'),
      new Cell(new Coordinate(12, 15), 'P'),
      new Cell(new Coordinate(12, 16), 'P'),
      new Cell(new Coordinate(12, 17), 'E'),
      new Cell(new Coordinate(12, 18))
    );

    crossword.Sentences
      .Count()
      .Should()
      .Be(10);
  }
}